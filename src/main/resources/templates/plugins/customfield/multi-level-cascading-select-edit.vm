#if (!$request || !$request.getAttribute("multilevelcascade"))
	$!request.setAttribute("multilevelcascade" , "true")
	## @TODO Somewhat of a hack should move when fields is refactored.
	    <script type="text/javascript" src="$!{request.contextPath}/includes/js/multilevelcascadingUtil.js"></script>
#end

#controlHeader ($action $customField.id $customField.name $fieldLayoutItem.required $displayParameters.noHeader)

##this macro render the select list for viewing in edit and create mask
## prende in ingresso una stringa che identifica il livello, l'id del custom field ed una mappa a cui viene associato al livello la lista delle option
## key -> livello ( es: "1", "2", "3"
## customfieldid -> id del custom field
## levels -> la mappa livello -> lista option per quel livello

#macro(renderSelect $key $customfieldid $levels)
    #if ($levels.get($key))
        ##parentMap è la lista delle opzioni per il livello in input da key
        #set ($parentMap = $levels.get($key))
        <select name="$customfieldid:$key" id="$customfieldid:$key">
            #if (!$fieldLayoutItem.required)
                #foreach ($parentid in $parentMap.keySet())
                    <option class="$parentid" value="-1">$i18n.getText("common.words.pleaseselect")</option>
                #end
                <option class="select" value="-3">$i18n.getText("common.filters.any")</option>
            #end
            #foreach ($parentid in $parentMap.keySet())
                ## mi sto scorrendo le opzioni per livello
                #foreach ($option in $parentMap.get($parentid))
                    <option class="$parentid" value="$option.optionId">$option.value</option>
                #end
            #end
        </select>
    #end
#end

#set($customList = $mlcscftype.getOptionMapFromOptions($configs.options))
#set($numLevels = $customList.size() - 1)

##questo è il template principale, inizia a valorizzarsi solo il primo livello e poi affida allo scripting dinamico il resto
## scriviamone una variante
#if ($customList.get(null))
    <select name="${customField.id}" id="${customField.id}">
        #if (!$fieldLayoutItem.required)
            <option value="-1">$i18n.getText("common.words.pleaseselect")</option>
        #end
            <option value="-3">$i18n.getText("common.filters.any")</option>
        #set ($rootMap = $customList.get(null))
        #foreach ($option in $rootMap.get(null))
            <option value="$option.optionId">$cfValueEncoder.encodeForHtml($option.value)</option>  
        #end
    </select>
    ##voglio prima scrivere tutte le option, su cui agire e poi voglio scatenare il dynamic
    #foreach ($id in [1..$numLevels])
        #set($key = $id.toString())
        #if ($customList.get($key))
            #renderSelect ($key ${customField.id} $customList)
        #end
    #end
    ##questa parte va eseguita dopo o script si spera
    #foreach ($id in [0..$numLevels])
        #set($key = $id.toString())
        #if ($customList.get($key))
            
            #if ($id > 1)
                #set ($script = "$!script MLCS.dynamicSelect('${customField.id}\\:$prevkey', '${customField.id}\\:$key');")
            #else
                #set ($script = "$!script MLCS.dynamicSelect('${customField.id}', '${customField.id}\\:$key');")    
            #end
        #end
        #set ($prevkey = $key)
    #end
#end

#controlFooter ($action $fieldLayoutItem.fieldDescription $displayParameters.noHeader)

<script>
    $!script

    #if ($numLevels >= 0)
        #foreach ($selectedId in [0..$numLevels])
            #if ($value.getFirstValueForKey($selectedId.toString()))
                #set($selectedValue = $value.getFirstValueForKey($selectedId.toString()))
            #else
                #set($selectedValue = "-1")
            #end
            #if ($selectedId == 0)
                selectOption('select#${customField.id}', '${selectedValue}');
            #else
                selectOption('select#${customField.id}\\:$!selectedId', '${selectedValue}');
            #end
        #end
    #end
</script>
